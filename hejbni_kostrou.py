import os
import pandas as pd
import re
import logging
import json
from flask import Flask, render_template, request, redirect, url_for, flash, jsonify, session, send_from_directory
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from db_config import db, DATABASE_URI
# Importujeme z models a app_utils
from models.zak import Zak
from models.disciplines import Discipline, Score
from models.student_scores import StudentScore
from models.skolni_rok import SkolniRok
from models.odkazy_info import Odkaz, Informace, Soubor
from app_utils import (
    vypocet_rozmezi_bodu, vypocet_znamky, allowed_file,
    get_all_zaci, vyhledat_zaky, get_zak_by_id, get_student_scores,
    get_aktivni_tridy, get_absolventi_tridy,
    ziskej_body_z_vykonu, get_student_performances, 
    save_student_performance, save_multiple_performances,
    get_student_summary, initialize_discipline_types,
    get_all_odkazy, group_odkazy_by_category, get_all_informace, 
    get_all_soubory, create_odkaz, create_informace, 
    create_soubor, delete_odkaz, delete_informace, delete_soubor,
    vytvorit_vychozi_odkazy,
    get_all_skolni_roky, ensure_skolni_rok_session,
    get_all_disciplines, get_discipline_by_id, 
    get_discipline_name, get_classes_with_performances,
    get_students_with_performances
)
from import_zaci import import_zaci
from import_skolni_roky import import_skolni_roky
from import_bodovaci_databaze import import_excel, FORMATY_DISCIPLIN, convert_value
from dotenv import load_dotenv
from datetime import datetime
from sqlalchemy.sql import func
from sqlalchemy import desc, asc, and_, or_
from logging.handlers import RotatingFileHandler
from typing import Any, Optional, Union, Tuple, Literal
from flask import Response

# ‚úÖ Naƒçten√≠ bezpeƒçn√Ωch promƒõnn√Ωch
load_dotenv()

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = DATABASE_URI
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['UPLOAD_FOLDER'] = 'static/uploads'  
app.config['ALLOWED_EXTENSIONS'] = {'pdf', 'docx', 'png', 'jpg', 'jpeg', 'gif', 'xlsx', 'pptx', 'txt', 'csv', 'zip', 'rar', 'mp4', 'mp3'}
app.secret_key = os.getenv("SECRET_KEY", "hejbni_kostrou_secret_key")

# P≈ôidejte toto po inicializaci aplikace (p≈ôed app.config['UPLOAD_FOLDER'])
app.config['SESSION_TYPE'] = 'filesystem'

# Vytvo≈ôen√≠ adres√°≈ôe pro uploady, pokud neexistuje
uploads_dir = os.path.join(app.root_path, app.config['UPLOAD_FOLDER'])
if not os.path.exists(uploads_dir):
    os.makedirs(uploads_dir)
    print(f"‚úÖ Vytvo≈ôena slo≈æka pro nahr√°v√°n√≠ soubor≈Ø: {uploads_dir}")

# Inicializace datab√°ze a migrac√≠
db.init_app(app)
migrate = Migrate(app, db)

# V setup_logger funkci nastavit UTF-8 k√≥dov√°n√≠
def setup_logger():
    log_dir = os.path.join(app.root_path, 'logs')
    os.makedirs(log_dir, exist_ok=True)
    
    log_file = os.path.join(log_dir, 'app.log')
    handler = RotatingFileHandler(log_file, maxBytes=10000000, backupCount=5, encoding='utf-8')
    
    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    handler.setFormatter(formatter)
    
    app.logger.addHandler(handler)
    app.logger.setLevel(logging.INFO)
    
    app.logger.info('Aplikace spu≈°tƒõna')

# Zavolat tuto funkci po vytvo≈ôen√≠ aplikace
setup_logger()

@app.before_request  # type: ignore[assignment]
def nastav_skolni_rok_v_session():
    ensure_skolni_rok_session(session)

@app.route("/")
def home():
    """Domovsk√° str√°nka aplikace."""
    skolni_roky = get_all_skolni_roky()  # Pou≈æit√≠ utility funkce
    app.logger.info(f"Naƒçteno {len(skolni_roky)} ≈°koln√≠ch rok≈Ø")
    
    if not skolni_roky:
        flash("Datab√°ze ≈°koln√≠ch rok≈Ø je pr√°zdn√°! Importujte ≈°koln√≠ roky.", "warning")
        return render_template("home.html", skolni_roky=[])
    
    # Nastaven√≠ aktu√°ln√≠ho ≈°koln√≠ho roku do session, pokud nen√≠
    if 'vybrany_skolni_rok_od' not in session:
        aktualni_rok = next((r for r in skolni_roky if r.aktualni), skolni_roky[-1])
        session['vybrany_skolni_rok_od'] = aktualni_rok.rok_od
        session['vybrany_skolni_rok_do'] = aktualni_rok.rok_do
    
    return render_template("home.html", skolni_roky=skolni_roky)

@app.route('/tridy')
def zobraz_tridy():
    """Zobrazen√≠ seznamu v≈°ech t≈ô√≠d."""
    try:
        # Z√≠sk√°n√≠ aktu√°ln√≠ho ≈°koln√≠ho roku ze session
        vybrany_rok = session.get('vybrany_skolni_rok_od')
        
        # Pokud nen√≠ v session, pou≈æijeme aktu√°ln√≠ rok
        if not vybrany_rok:
            aktualni_rok = SkolniRok.query.filter_by(aktualni=True).first()
            if aktualni_rok:
                vybrany_rok = aktualni_rok.rok_od
            else:
                # Pokud nen√≠ ani jeden rok nastaven jako aktu√°ln√≠
                aktualni_rok = SkolniRok.query.order_by(SkolniRok.rok_od.desc()).first()
                if aktualni_rok:
                    vybrany_rok = aktualni_rok.rok_od
                else:
                    flash("Nejsou definov√°ny ≈æ√°dn√© ≈°koln√≠ roky.", "warning")
                    return redirect(url_for("home"))
        
        # Z√≠sk√°n√≠ seznamu t≈ô√≠d
        tridni_seznam = get_aktivni_tridy(vybrany_rok)
        absolventi_tridy = get_absolventi_tridy(vybrany_rok)
        
        return render_template('trida.html', 
                             tridni_seznam=tridni_seznam,
                             absolventi_tridy=absolventi_tridy,
                             vybrany_rok=vybrany_rok)
    except Exception as e:
        app.logger.error(f"Chyba p≈ôi zobrazen√≠ seznamu t≈ô√≠d: {str(e)}")
        flash(f"Do≈°lo k chybƒõ: {str(e)}", "danger")
        return redirect(url_for("home"))

@app.route("/zobraz_tridy")
def zobraz_tridy_alt():
    """Alternativn√≠ cesta pro zobrazen√≠ t≈ô√≠d."""
    return redirect(url_for("zobraz_tridy"))

@app.route("/detail_tridy/<int:cislo>/<string:pismeno>")
@app.route("/detail_tridy/<int:cislo>/<string:pismeno>/<int:rok>")
@app.route("/detail_tridy/<int:cislo>/<string:pismeno>/<int:rok>/<int:absolvent_rok>")
def detail_tridy(cislo, pismeno, rok=None, absolvent_rok=None):
    """Zobraz√≠ detail t≈ô√≠dy."""
    try:
        # Kontrola, zda je vybr√°n ≈°koln√≠ rok
        if 'vybrany_skolni_rok_od' not in session:
            flash("Nejprve vyberte ≈°koln√≠ rok", "warning")
            return redirect(url_for('home'))
        
        vybrany_rok = rok or session.get('vybrany_skolni_rok_od')
        
        # N√°zev t≈ô√≠dy
        trida_nazev = f"{cislo}.{pismeno}"
        if absolvent_rok:
            trida_nazev = f"{trida_nazev} (absolventi {absolvent_rok})"
        
        # Z√≠sk√°n√≠ ≈æ√°k≈Ø v dan√© t≈ô√≠dƒõ
        vsichni_zaci = get_all_zaci()  # Pou≈æit√≠ utility funkce m√≠sto p≈ô√≠m√©ho dotazu
        chlapci = []
        divky = []
        
        for zak in vsichni_zaci:
            trida = zak.get_trida(vybrany_rok)
            
            # Pro absolventy kontrolujeme rok odchodu
            if absolvent_rok:
                if zak.skolni_rok_odchodu_od == absolvent_rok and f"{zak.cislo_tridy}.{zak.pismeno_tridy}" == f"{cislo}.{pismeno}":
                    if zak.pohlavi.lower() == "chlapec":
                        chlapci.append(zak)
                    else:
                        divky.append(zak)
            # Pro bƒõ≈æn√© t≈ô√≠dy
            elif trida == trida_nazev:
                if zak.pohlavi.lower() == "chlapec":
                    chlapci.append(zak)
                else:
                    divky.append(zak)
        
        # Se≈ôazen√≠ podle p≈ô√≠jmen√≠
        chlapci.sort(key=lambda x: x.prijmeni)
        divky.sort(key=lambda x: x.prijmeni)
        
        return render_template(
            'detail_tridy.html',
            trida_nazev=trida_nazev,
            chlapci=chlapci,
            divky=divky,
            vybrany_rok=vybrany_rok
        )
    except Exception as e:
        app.logger.error(f"Chyba p≈ôi zobrazen√≠ detailu t≈ô√≠dy: {e}")
        flash(f"P≈ôi naƒç√≠t√°n√≠ detailu t≈ô√≠dy do≈°lo k chybƒõ: {e}", "error")
        return redirect(url_for('home'))

@app.route('/detail_tridy_alt/<int:cislo>/<string:pismeno>/<int:rok>', methods=['GET'])
def detail_tridy_alt(cislo, pismeno, rok=None):
    try:
        return redirect(url_for("detail_tridy", cislo=cislo, pismeno=pismeno, rok=rok))
    except Exception as e:
        app.logger.error(f"Chyba p≈ôi p≈ôesmƒõrov√°n√≠: {str(e)}")
        flash(f"Do≈°lo k chybƒõ: {str(e)}", "danger")
        return redirect(url_for("zobraz_tridy"))

@app.route("/detail_tridy")
def seznam_trid():
    """Tento endpoint pouze p≈ôesmƒõruje na spr√°vnou str√°nku t≈ô√≠d."""
    return redirect(url_for("zobraz_tridy"))

@app.route("/zmen_skolni_rok", methods=["POST"])
def zmen_skolni_rok():
    """Zmƒõn√≠ aktu√°ln√≠ ≈°koln√≠ rok a p≈ôesune ≈æ√°ky do spr√°vn√Ωch t≈ô√≠d."""
    data = request.get_json()
    app.logger.info(f"üü° P≈ôijat√° data: {data}")  

    novy_rok = data.get("rok")
    if not novy_rok:
        return jsonify({"error": "‚ùå Nebyl zad√°n ≈æ√°dn√Ω rok!"}), 400

    try:
        rok_od = int(novy_rok.split("/")[0])
        rok_do = int(novy_rok.split("/")[1]) if "/" in novy_rok else rok_od + 1
    except ValueError:
        return jsonify({"error": "‚ùå Neplatn√Ω form√°t roku!"}), 400

    # ‚úÖ Nastaven√≠ roku do session pro pou≈æit√≠ na dal≈°√≠ch str√°nk√°ch
    # Toto je kl√≠ƒçov√© pro spr√°vn√© fungov√°n√≠ str√°nky trida.html
    session['vybrany_skolni_rok_od'] = rok_od
    session['vybrany_skolni_rok_do'] = rok_do

    skolni_rok = SkolniRok.query.filter_by(rok_od=rok_od).first()
    if not skolni_rok:
        return jsonify({"error": f"‚ùå ≈†koln√≠ rok {rok_od}/{rok_do} neexistuje v datab√°zi!"}), 400

    # ‚úÖ Aktualizace aktu√°ln√≠ho ≈°koln√≠ho roku
    SkolniRok.nastav_aktualni_rok(rok_od)

    # ‚úÖ Posunut√≠ ≈æ√°k≈Ø do spr√°vn√Ωch t≈ô√≠d
    posunout_zaky_podle_skolniho_roku(rok_od)

    app.logger.info(f"‚úÖ ≈†koln√≠ rok zmƒõnƒõn na {novy_rok}!")
    return jsonify({
        "message": f"≈†koln√≠ rok zmƒõnƒõn na {novy_rok}!",
        "reload": True  # P≈ôid√°me sign√°l pro refresh str√°nky
    })

@app.route("/synchronizovat_rok", methods=["POST"])
def synchronizovat_rok():
    data = request.get_json()
    novy_rok = data.get("rok")
    if novy_rok:
        session["vybrany_skolni_rok"] = novy_rok
        if "/" in novy_rok:
            session["vybrany_skolni_rok_od"] = int(novy_rok.split("/")[0])
            session["vybrany_skolni_rok_do"] = int(novy_rok.split("/")[1])
        aktualizovat_tridy(novy_rok)
        return jsonify({"message": f"≈†koln√≠ rok zmƒõnƒõn na {novy_rok}."})
    return jsonify({"error": "≈†koln√≠ rok nebyl zad√°n."}), 400

def posunout_zaky_podle_skolniho_roku(rok_od):
    """Posune ≈æ√°ky do spr√°vn√©ho roƒçn√≠ku podle vybran√©ho ≈°koln√≠ho roku."""
    try:
        vsichni_zaci = get_all_zaci()  # Pou≈æit√≠ utility funkce m√≠sto p≈ô√≠m√©ho dotazu
        for zak in vsichni_zaci:
            if zak.rok_nastupu_2_stupen and zak.cislo_tridy:
                # V√Ωpoƒçet nov√©ho roƒçn√≠ku
                novy_rocnik = zak.cislo_tridy + (rok_od - zak.rok_nastupu_2_stupen)
                if novy_rocnik > 9:
                    novy_rocnik = 9  # Maxim√°ln√≠ roƒçn√≠k je 9
                zak.cislo_tridy = novy_rocnik
        db.session.commit()
    except Exception as e:
        app.logger.error(f"‚ùå Chyba p≈ôi posunu ≈æ√°k≈Ø: {e}")

def aktualizovat_tridy(skolni_rok):
    """Aktualizuje t≈ô√≠dy ≈æ√°k≈Ø na z√°kladƒõ ≈°koln√≠ho roku."""
    try:
        zaci = get_all_zaci()  # Pou≈æit√≠ utility funkce m√≠sto p≈ô√≠m√©ho dotazu
        for zak in zaci:
            if zak.cislo_tridy and zak.cislo_tridy < 9:
                zak.cislo_tridy += 1
            elif zak.cislo_tridy == 9:
                zak.cislo_tridy = None  # P≈ôesun do absolvent≈Ø
                zak.pismeno_tridy = f"Absolvent {zak.pismeno_tridy}"
                zak.skolni_rok_odchodu_od = skolni_rok.split("/")[0]
                zak.skolni_rok_odchodu_do = skolni_rok.split("/")[1]
        db.session.commit()
    except Exception as e:
        app.logger.error(f"‚ùå Chyba p≈ôi aktualizaci t≈ô√≠d: {e}")

@app.context_processor
def inject_skolni_rok():
    """Vlo≈æ√≠ vybran√Ω ≈°koln√≠ rok do kontextu ≈°ablon."""
    skolni_rok = None
    
    if 'vybrany_skolni_rok_od' in session and 'vybrany_skolni_rok_do' in session:
        skolni_rok = f"{session['vybrany_skolni_rok_od']}/{session['vybrany_skolni_rok_do']}"
    
    return {
        'vybrany_skolni_rok': skolni_rok,
        'vybrany_skolni_rok_od': session.get('vybrany_skolni_rok_od'),
        'vybrany_rok': session.get('vybrany_skolni_rok_od')
    }

@app.route("/zaci")
def zobraz_zaky():
    """Zobrazen√≠ seznamu v≈°ech ≈æ√°k≈Ø."""
    try:
        # Z√≠sk√°n√≠ v≈°ech ≈æ√°k≈Ø
        zaky = get_all_zaci()
        
        # Kontrola, zda funkce vr√°tila platn√° data
        if zaky is None:
            zaky = []  # Prevence chyby p≈ôi iteraci, pokud je v√Ωsledek None
            flash("Nepoda≈ôilo se naƒç√≠st seznam ≈æ√°k≈Ø.", "warning")
        
        # Z√≠sk√°n√≠ vybran√©ho ≈°koln√≠ho roku z session
        vybrany_skolni_rok = session.get('vybrany_skolni_rok_od')
        
        if not vybrany_skolni_rok:
            aktualni_rok = SkolniRok.query.filter_by(aktualni=True).first()
            if aktualni_rok:
                vybrany_skolni_rok = aktualni_rok.rok_od
                session['vybrany_skolni_rok_od'] = aktualni_rok.rok_od
                session['vybrany_skolni_rok_do'] = aktualni_rok.rok_do
            else:
                flash("Nen√≠ nastaven aktu√°ln√≠ ≈°koln√≠ rok!", "warning")
                return redirect(url_for("home"))
        
        return render_template("zaci.html", zaky=zaky, vybrany_skolni_rok=vybrany_skolni_rok)
    except Exception as e:
        app.logger.error(f"Chyba p≈ôi zobrazen√≠ seznamu ≈æ√°k≈Ø: {str(e)}")
        flash(f"Do≈°lo k chybƒõ: {str(e)}", "danger")
        return redirect(url_for("home"))

@app.route("/discipliny")
def discipliny():
    """Zobrazen√≠ seznamu v≈°ech discipl√≠n s mo≈ænost√≠ proch√°zen√≠ t≈ô√≠d."""
    try:
        discipliny_list = get_all_disciplines()
        vybrany_skolni_rok = request.args.get("skolni_rok", "")
        
        if not vybrany_skolni_rok:
            aktualni_rok = SkolniRok.query.filter_by(aktualni=True).first()
            if aktualni_rok:
                vybrany_skolni_rok = f"{aktualni_rok.rok_od}/{aktualni_rok.rok_do}"
        
        return render_template(
            "discipliny.html", 
            discipliny=discipliny_list, 
            vybrany_skolni_rok=vybrany_skolni_rok
        )
        
    except Exception as e:
        app.logger.error(f"Chyba p≈ôi zobrazen√≠ discipl√≠n: {str(e)}")
        flash(f"Do≈°lo k chybƒõ: {str(e)}", "danger")
        return redirect(url_for("home"))

@app.route("/get_classes_for_discipline")
def get_classes_for_discipline():
    """API koncov√Ω bod pro z√≠sk√°n√≠ t≈ô√≠d s ≈æ√°ky, kte≈ô√≠ maj√≠ z√°znamy v dan√© discipl√≠nƒõ."""
    discipline_id = request.args.get("discipline_id", type=int)
    skolni_rok = request.args.get("skolni_rok", "")
    
    if not discipline_id:
        return jsonify({"error": "Chyb√≠ ID discipl√≠ny"}), 400
    
    try:
        # Pou≈æit√≠ ji≈æ importovan√© funkce
        classes = get_classes_with_performances(discipline_id, skolni_rok)
        return jsonify(classes)
    
    except Exception as e:
        app.logger.error(f"Chyba p≈ôi z√≠sk√°v√°n√≠ t≈ô√≠d pro discipl√≠nu: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route("/get_discipline_name")
def get_discipline_name_route():
    """API koncov√Ω bod pro z√≠sk√°n√≠ n√°zvu discipl√≠ny podle ID."""
    discipline_id = request.args.get("discipline_id", type=int)
    
    if not discipline_id:
        return jsonify({"error": "Chyb√≠ ID discipl√≠ny"}), 400
    
    try:
        # Pou≈æit√≠ utility funkce - upraveno vol√°n√≠ podle skuteƒçn√Ωch parametr≈Ø
        name = get_discipline_name(discipline_id)  # Opraveno - pou≈æit√≠ bez named parametru
        if name:
            return jsonify({"name": name})
        return jsonify({"error": "Discipl√≠na nenalezena"}), 404
    except Exception as e:
        app.logger.error(f"Chyba p≈ôi z√≠sk√°v√°n√≠ n√°zvu discipl√≠ny: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route("/get_students_performances")
def get_students_performances():
    """API koncov√Ω bod pro z√≠sk√°n√≠ ≈æ√°k≈Ø a jejich v√Ωkon≈Ø pro danou t≈ô√≠du, pohlav√≠ a discipl√≠nu."""
    discipline_id = request.args.get("discipline_id", type=int)
    class_name = request.args.get("class", "")
    gender = request.args.get("gender", "")
    skolni_rok = request.args.get("skolni_rok", "")
    
    if not discipline_id or not class_name or not gender or not skolni_rok:
        return jsonify({"error": "Chyb√≠ povinn√© parametry"}), 400
    
    try:
        # Pou≈æit√≠ ji≈æ importovan√© funkce
        students_data = get_students_with_performances(discipline_id, class_name, gender, skolni_rok)
        return jsonify(students_data)
    
    except Exception as e:
        app.logger.error(f"Chyba p≈ôi z√≠sk√°v√°n√≠ v√Ωkon≈Ø ≈æ√°k≈Ø: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route("/ulozit_vykony_hromadne", methods=["POST"])
def ulozit_vykony_hromadne():
    """API koncov√Ω bod pro hromadn√© ulo≈æen√≠ v√Ωkon≈Ø ≈æ√°k≈Ø."""
    data = request.get_json()
    
    if not data or "performances" not in data:
        return jsonify({"error": "Chyb√≠ povinn√° data"}), 400
    
    performances = data["performances"]
    
    try:
        # Extrakce ≈°koln√≠ho roku z dat
        skolni_rok = data.get("skolni_rok", None)
        if isinstance(skolni_rok, str) and "/" in skolni_rok:
            skolni_rok = int(skolni_rok.split("/")[0])
        
        # Pou≈æit√≠ utility funkce
        results = save_multiple_performances(performances, skolni_rok)
        
        return jsonify({
            "success": True,
            "count": len(results),
            "message": f"‚úÖ {len(results)} v√Ωkon≈Ø bylo √∫spƒõ≈°nƒõ ulo≈æeno!"
        })
    except Exception as e:
        app.logger.error(f"Chyba p≈ôi ukl√°d√°n√≠ v√Ωkon≈Ø: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route("/get_student_performance")
def get_student_performance():
    """API koncov√Ω bod pro z√≠sk√°n√≠ v√Ωkonu ≈æ√°ka."""
    try:
        zak_id = request.args.get("zak_id", type=int)
        discipline_id = request.args.get("discipline_id", type=int)
        rocnik = request.args.get("rocnik", type=int)
        skolni_rok = request.args.get("skolni_rok", type=int)
        
        if not all([zak_id, discipline_id, rocnik]):
            return jsonify({"error": "Chyb√≠ povinn√© parametry"}), 400
            
        # Z√≠sk√°n√≠ existuj√≠c√≠ho z√°znamu
        student_score = StudentScore.query.filter_by(
            zak_id=zak_id, 
            discipline_id=discipline_id, 
            rocnik=rocnik,
            skolni_rok=skolni_rok
        ).first()
        
        if student_score:
            return jsonify({
                "id": student_score.id,
                "vykon": student_score.vykon,
                "body": student_score.body
            })
        else:
            return jsonify({"message": "≈Ω√°dn√Ω v√Ωkon nenalezen"})
            
    except Exception as e:
        app.logger.error(f"Chyba p≈ôi z√≠sk√°v√°n√≠ v√Ωkonu ≈æ√°ka: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route("/ulozit_vykon", methods=["POST"])
def ulozit_vykon():
    """API koncov√Ω bod pro ulo≈æen√≠ v√Ωkonu jednoho ≈æ√°ka."""
    try:
        data = request.get_json()
        app.logger.info(f"üîç DEBUG: P≈ôijata data pro ulo≈æen√≠ v√Ωkonu: {data}")
        
        if not data:
            return jsonify({"error": "≈Ω√°dn√° data nebyla poskytnuta"}), 400
        
        zak_id = data.get("zak_id")
        discipline_id = data.get("discipline_id")
        rocnik = data.get("rocnik")
        vykon = data.get("vykon")
        skolni_rok = data.get("skolni_rok")
        
        if not zak_id or not discipline_id or not rocnik:
            return jsonify({"error": "Chyb√≠ povinn√© parametry"}), 400

        body = ziskej_body_z_vykonu(discipline_id, vykon)
        save_student_performance(zak_id, discipline_id, rocnik, vykon, skolni_rok)

        return jsonify({
            "message": "V√Ωkon √∫spƒõ≈°nƒõ ulo≈æen",
            "body": body
        })
    except ValueError as e:
        app.logger.error(f"Chybn√Ω form√°t v√Ωkonu: {str(e)}")
        return jsonify({"error": str(e)}), 400
    except Exception as e:
        app.logger.error(f"Chyba p≈ôi ukl√°d√°n√≠ v√Ωkonu: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route("/ziskat_tridu")
def ziskat_tridu():
    """API koncov√Ω bod pro z√≠sk√°n√≠ t≈ô√≠dy ≈æ√°ka."""
    try:
        zak_id = request.args.get("zak_id", type=int)
        rok = request.args.get("rok", type=int)
        
        if not zak_id:
            return jsonify({"error": "Chyb√≠ ID ≈æ√°ka"}), 400
            
        zak = get_zak_by_id(zak_id)
        if not rok:
            aktualni_rok = SkolniRok.query.filter_by(aktualni=True).first()
            rok = aktualni_rok.rok_od if aktualni_rok else None
        
        trida = zak.get_trida(rok) if rok else None
        return jsonify({"trida": trida})
    except Exception as e:
        app.logger.error(f"Chyba p≈ôi z√≠sk√°v√°n√≠ t≈ô√≠dy ≈æ√°ka: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route("/vyhledat")
def vyhledat_zaka():
    """API koncov√Ω bod pro vyhled√°v√°n√≠ ≈æ√°k≈Ø."""
    try:
        query = request.args.get("q", "")
        if not query or len(query) < 2:
            return jsonify([])
            
        zaci = vyhledat_zaky(query)
        
        # Form√°tov√°n√≠ v√Ωsledk≈Ø pro frontend
        results = []
        for zak in zaci:
            # Z√≠sk√°n√≠ aktu√°ln√≠ t≈ô√≠dy
            aktualni_rok = SkolniRok.query.filter_by(aktualni=True).first()
            trida = zak.get_trida(aktualni_rok.rok_od) if aktualni_rok else "Nezn√°m√° t≈ô√≠da"
            
            results.append({
                "id": zak.id,
                "text": f"{zak.jmeno} {zak.prijmeni} ({trida})"
            })
            
        return jsonify(results)
    except Exception as e:
        app.logger.error(f"Chyba p≈ôi vyhled√°v√°n√≠ ≈æ√°ka: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route("/zak/<int:zak_id>")
def detail_zaka(zak_id):
    try:
        # Z√≠sk√°n√≠ vybran√©ho ≈°koln√≠ho roku
        vybrany_skolni_rok = None
        if 'vybrany_skolni_rok_od' in session:
            vybrany_skolni_rok = session['vybrany_skolni_rok_od']
        
        # Z√≠sk√°n√≠ ≈æ√°ka
        zak = get_zak_by_id(zak_id)
        if not zak:
            flash("≈Ω√°k nebyl nalezen", "error")
            return redirect(url_for('zobraz_zaky'))
        
        # Z√≠sk√°n√≠ v≈°ech discipl√≠n a zaji≈°tƒõn√≠, ≈æe maj√≠ nastaven√Ω typ
        disciplines = get_all_disciplines()
        
        # Inicializace typu discipl√≠n, pokud je≈°tƒõ nejsou nastaveny
        for discipline in disciplines:
            if discipline.typ is None:
                if discipline.nazev in ["Refer√°t", "Reprezentace ≈°koly", "No≈°en√≠ cviƒçebn√≠ho √∫boru", 
                                       "Veden√≠ rozcviƒçky", "Mimo≈°koln√≠ aktivita (nap≈ô. screenshot aplikace sleduj√≠c√≠ aktivitu)", 
                                       "Aktivn√≠ p≈ô√≠stup, snaha", "Zlep≈°en√≠ v√Ωkonu od posledn√≠ho mƒõ≈ôen√≠", 
                                       "Pomoc s organizac√≠", "Ostatn√≠ plusov√© body"]:
                    discipline.typ = 'bonus'
                elif discipline.nazev in ["Neno≈°en√≠ cviƒçebn√≠ho √∫boru", "Bezpeƒçnostn√≠ riziko (gumiƒçka, boty, ‚Ä¶)", 
                                         "Nek√°ze≈à (ru≈°en√≠, neperespektov√°n√≠ pokyn≈Ø, ‚Ä¶)", "Ostatn√≠ m√≠nusov√© body"]:
                    discipline.typ = 'penalty'
                else:
                    discipline.typ = 'regular'
        
        # Z√≠sk√°n√≠ aktu√°ln√≠ho roƒçn√≠ku ≈æ√°ka
        rocnik = None
        if vybrany_skolni_rok and zak.rok_nastupu_2_stupen:
            # V√Ωpoƒçet roƒçn√≠ku: ƒç√≠slo t≈ô√≠dy + rozd√≠l let mezi vybran√Ωm rokem a rokem n√°stupu
            rocnik = zak.cislo_tridy + (vybrany_skolni_rok - zak.rok_nastupu_2_stupen)
            # Omezen√≠ na rozsah 6-9 t≈ô√≠d
            rocnik = max(6, min(9, rocnik))
        else:
            # Defaultn√≠ hodnota, pokud nen√≠ zn√°m√Ω roƒçn√≠k
            rocnik = zak.cislo_tridy if zak.cislo_tridy else 6
            
        # D≈Øle≈æit√©: Pro testovac√≠ √∫ƒçely u ≈æ√°k≈Ø z 9. t≈ô√≠dy
        # ≈Ω√°k, kter√Ω nastoupil do 9. t≈ô√≠dy, by mƒõl z≈Østat v 9. t≈ô√≠dƒõ pro √∫ƒçely test≈Ø
        if zak.cislo_tridy == 9 and rocnik > 9:
            rocnik = 9
        
        # V√Ωpoƒçet bodov√©ho rozmez√≠ pro zn√°mky
        bodove_rozmezi = vypocet_rozmezi_bodu(zak.pohlavi, rocnik if rocnik else 6)
        
        # Naƒçten√≠ existuj√≠c√≠ch v√Ωkon≈Ø
        student_scores = get_student_performances(zak_id, rocnik=rocnik, skolni_rok=vybrany_skolni_rok)
        
        # P≈ô√≠prava dat pro ≈°ablonu
        performance_data = {}
        for score in student_scores:
            if score and score.discipline_id:
                performance_data[score.discipline_id] = {
                    'vykon': score.vykon or '',
                    'body': score.body or 0
                }
        
        # Obecn√° oprava pro zpracov√°n√≠ v√Ωkon≈Ø
        discipliny_sum = {}
        for score in student_scores:
            if score.discipline_id not in discipliny_sum:
                discipliny_sum[score.discipline_id] = 0
            discipliny_sum[score.discipline_id] += score.vykon or 0  # Oprava: ochrana proti None

        return render_template(
            "detail_zaka.html", 
            zak=zak, 
            disciplines=disciplines, 
            rocnik=rocnik, 
            bodove_rozmezi=bodove_rozmezi,
            vybrany_rok=vybrany_skolni_rok,
            student_scores=performance_data
        )
    except Exception as e:
        app.logger.error(f"Chyba p≈ôi zobrazen√≠ detailu ≈æ√°ka: {e}")
        return render_template("error.html", error=f"Chyba p≈ôi zobrazen√≠ detailu ≈æ√°ka: {e}")

@app.route("/nacti_vykony")
def nacti_vykony():
    """Naƒçte v√Ωkony ≈æ√°ka pro dan√Ω roƒçn√≠k."""
    try:
        zak_id = request.args.get('zak_id', type=int)
        rocnik = request.args.get('rocnik', type=int)
        
        if not zak_id or not rocnik:
            return jsonify({"error": "Chyb√≠ ID ≈æ√°ka nebo roƒçn√≠k"}), 400
        
        # Z√≠sk√°n√≠ ≈æ√°ka pro kontrolu
        zak = get_zak_by_id(zak_id)
        if not zak:
            return jsonify({"error": "≈Ω√°k nebyl nalezen"}), 404
            
        # Z√≠sk√°n√≠ v≈°ech discipl√≠n
        disciplines = get_all_disciplines()
        discipline_dict = {d.id: d for d in disciplines}
        
        # Z√≠sk√°n√≠ v√Ωkon≈Ø ≈æ√°ka
        performances = StudentScore.query.filter_by(zak_id=zak_id, rocnik=rocnik).all()
        
        # Sestaven√≠ JSON odpovƒõdi
        results = []
        for perf in performances:
            disciplina = discipline_dict.get(perf.discipline_id)
            if disciplina:
                results.append({
                    "disciplina_id": perf.discipline_id,
                    "disciplina_nazev": disciplina.nazev,
                    "vykon": perf.vykon or "",  # Oprava: Pr√°zdn√Ω ≈ôetƒõzec m√≠sto None
                    "body": perf.body or 0,     # Oprava: 0 m√≠sto None
                    "rocnik": perf.rocnik
                })
        
        return jsonify({"vykony": results})
    except Exception as e:
        app.logger.error(f"Chyba p≈ôi naƒç√≠t√°n√≠ v√Ωkon≈Ø: {e}")
        return jsonify({"error": str(e)}), 500

@app.route("/student_summary")
def student_summary():
    """Vr√°t√≠ souhrn v√Ωkon≈Ø ≈æ√°ka ve form√°tu JSON."""
    try:
        zak_id = request.args.get('zak_id', type=int)
        rocnik = request.args.get('rocnik', type=int)
        skolni_rok = request.args.get('skolni_rok', type=int)
        
        if not zak_id:
            return jsonify({"error": "Chyb√≠ ID ≈æ√°ka"}), 400
            
        summary = get_student_summary(zak_id, rocnik, skolni_rok)
        return jsonify(summary)
    except Exception as e:
        app.logger.error(f"Chyba p≈ôi z√≠sk√°v√°n√≠ souhrnu ≈æ√°ka: {e}")
        return jsonify({"error": str(e)}), 500

def inicializovat_databazi():
    """Inicializuje datab√°zi v√Ωchoz√≠mi daty, pokud je pr√°zdn√°."""
    try:
        # Kontrola existence tabulek
        db.create_all()
        app.logger.info("üöÄ Inicializace datab√°ze - p≈ôid√°v√°m v√Ωchoz√≠ ≈°koln√≠ rok...")
        
        # P≈ôid√°n√≠ v√Ωchoz√≠ho ≈°koln√≠ho roku, pokud ≈æ√°dn√Ω neexistuje
        if not SkolniRok.query.first():
            skolni_rok = SkolniRok()
            skolni_rok.rok_od = 2025
            skolni_rok.rok_do = 2026
            skolni_rok.aktualni = True
            db.session.add(skolni_rok)
            db.session.commit()
            app.logger.info(f"‚úÖ P≈ôid√°n v√Ωchoz√≠ ≈°koln√≠ rok {skolni_rok.rok_od}/{skolni_rok.rok_do}")
    except Exception as e:
        app.logger.error(f"Chyba p≈ôi inicializaci datab√°ze: {e}")

# ========= ODKAZY A INFORMACE ==========

@app.route("/odkazy_a_informace/", methods=["GET", "POST"])
@app.route("/odkazy_a_informace", methods=["GET", "POST"])
@app.route("/odkazy", methods=["GET", "POST"])  # Pro zpƒõtnou kompatibilitu
def odkazy_a_informace():
    """Zobraz√≠ str√°nku s odkazy, informacemi a soubory."""
    
    # Naƒçten√≠ odkaz≈Ø z datab√°ze
    try:
        odkazy = get_all_odkazy()
    except Exception as e:
        flash(f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ odkaz≈Ø: {str(e)}", "error")
        odkazy = []
    
    # Seskupen√≠ odkaz≈Ø podle kategori√≠
    odkazy_podle_kategorii = group_odkazy_by_category(odkazy)
    
    # Pokud nem√°me ≈æ√°dn√© odkazy, vytvo≈ô√≠me uk√°zkov√©
    if not odkazy_podle_kategorii:
        vytvorit_vychozi_odkazy()
        odkazy = get_all_odkazy()
        odkazy_podle_kategorii = group_odkazy_by_category(odkazy)
    
    # Naƒçten√≠ informac√≠ z datab√°ze
    try:
        informace = get_all_informace()
    except Exception as e:
        flash(f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ informac√≠: {str(e)}", "error")
        informace = []
    
    # Kontrola a vytvo≈ôen√≠ slo≈æky pro soubory
    upload_folder = os.path.join(app.root_path, app.config['UPLOAD_FOLDER'])
    os.makedirs(upload_folder, exist_ok=True)

    # Z√≠sk√°n√≠ seznamu nahran√Ωch soubor≈Ø
    try:
        soubory = get_all_soubory()
    except Exception as e:
        flash(f"‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ soubor≈Ø: {str(e)}", "error")
        soubory = []

    # Aktu√°ln√≠ datum pro formul√°≈ô
    today_date = datetime.now().strftime("%Y-%m-%d")

    # Seznam kategori√≠ pro select
    kategorie_list = list(odkazy_podle_kategorii.keys()) if odkazy_podle_kategorii else ["≈†kola", "Sport", "Uƒçivo"]

    return render_template(
        "odkazy_a_informace.html", 
        odkazy_podle_kategorii=odkazy_podle_kategorii,
        informace=informace,
        soubory=soubory,
        today_date=today_date,
        kategorie_list=kategorie_list
    )

@app.route("/pridat_odkaz", methods=["POST"])
def pridat_odkaz():
    """P≈ôid√° nov√Ω odkaz."""
    try:
        nazev = request.form.get("nazev")
        url = request.form.get("url")
        kategorie = request.form.get("kategorie")
        
        if not all([nazev, url, kategorie]):
            flash("Vypl≈àte v≈°echna povinn√° pole!", "warning")
            return redirect(url_for("odkazy_a_informace"))
            
        # P≈ôid√°n√≠ http:// pokud chyb√≠
        if url and not url.startswith(('http://', 'https://')):
            url = f"http://{url}"
            
        create_odkaz(nazev, url, kategorie)
        db.session.commit()
        
        flash("Odkaz byl √∫spƒõ≈°nƒõ p≈ôid√°n!", "success")
        return redirect(url_for("odkazy_a_informace"))
    except Exception as e:
        db.session.rollback()
        app.logger.error(f"Chyba p≈ôi p≈ôid√°v√°n√≠ odkazu: {str(e)}")
        flash(f"Do≈°lo k chybƒõ: {str(e)}", "danger")
        return redirect(url_for("odkazy_a_informace"))

@app.route("/pridat_informaci", methods=["POST"])
def pridat_informaci():
    """P≈ôid√° novou informaci do datab√°ze."""
    try:
        nadpis = request.form["nadpis"]
        text = request.form["text"]
        datum_str = request.form["datum"]
        
        # P≈ôevod ≈ôetƒõzce na datum
        if datum_str:
            datum = datetime.strptime(datum_str, "%Y-%m-%d")
        else:
            datum = datetime.now()
        
        create_informace(nadpis, text, datum)
        db.session.commit()
        
        flash(f"‚úÖ Informace '{nadpis}' byla √∫spƒõ≈°nƒõ p≈ôid√°na!", "success")
    except Exception as e:
        db.session.rollback()
        flash(f"‚ùå Chyba p≈ôi p≈ôid√°v√°n√≠ informace: {str(e)}", "error")
    
    return redirect(url_for("odkazy_a_informace"))

@app.route("/nahrat_soubor", methods=["POST"])
def nahrat_soubor():
    """Nahraje nov√Ω soubor."""
    try:
        # Kontrola, zda byl soubor p≈ôilo≈æen
        if 'soubor' not in request.files:
            flash("Nebyl vybr√°n ≈æ√°dn√Ω soubor!", "warning")
            return redirect(url_for("odkazy_a_informace"))
            
        file = request.files['soubor']
        popis = request.form.get("popis", "")
        
        if file.filename == '':
            flash("Nebyl vybr√°n ≈æ√°dn√Ω soubor!", "warning")
            return redirect(url_for("odkazy_a_informace"))
            
        if not allowed_file(file.filename, app.config['ALLOWED_EXTENSIONS']):
            flash("Tento typ souboru nen√≠ podporov√°n!", "warning")
            return redirect(url_for("odkazy_a_informace"))
        
        create_soubor(file, file.filename, popis)
        db.session.commit()
        
        flash("Soubor byl √∫spƒõ≈°nƒõ nahr√°n!", "success")
        return redirect(url_for("odkazy_a_informace"))
    except Exception as e:
        db.session.rollback()
        app.logger.error(f"Chyba p≈ôi nahr√°v√°n√≠ souboru: {str(e)}")
        flash(f"Do≈°lo k chybƒõ: {str(e)}", "danger")
        return redirect(url_for("odkazy_a_informace"))

@app.route("/smazat_odkaz/<int:odkaz_id>", methods=["GET"])
def smazat_odkaz(odkaz_id):
    """Sma≈æe odkaz."""
    try:
        if delete_odkaz(odkaz_id):
            flash("Odkaz byl √∫spƒõ≈°nƒõ smaz√°n!", "success")
        else:
            flash("Odkaz nebyl nalezen!", "warning")
            
        return redirect(url_for("odkazy_a_informace"))
    except Exception as e:
        app.logger.error(f"Chyba p≈ôi maz√°n√≠ odkazu: {str(e)}")
        flash(f"Do≈°lo k chybƒõ: {str(e)}", "danger")
        return redirect(url_for("odkazy_a_informace"))

@app.route("/smazat_informaci/<int:informace_id>", methods=["GET"])
def smazat_informaci(informace_id):
    """Sma≈æe informaci."""
    try:
        if delete_informace(informace_id):
            flash("Informace byla √∫spƒõ≈°nƒõ smaz√°na!", "success")
        else:
            flash("Informace nebyla nalezena!", "warning")
            
        return redirect(url_for("odkazy_a_informace"))
    except Exception as e:
        app.logger.error(f"Chyba p≈ôi maz√°n√≠ informace: {str(e)}")
        flash(f"Do≈°lo k chybƒõ: {str(e)}", "danger")
        return redirect(url_for("odkazy_a_informace"))

@app.route("/smazat_soubor/<int:soubor_id>", methods=["GET"])
def smazat_soubor(soubor_id):
    """Sma≈æe soubor."""
    try:
        if delete_soubor(soubor_id):
            flash("Soubor byl √∫spƒõ≈°nƒõ smaz√°n!", "success")
        else:
            flash("Soubor nebyl nalezen!", "warning")
            
        return redirect(url_for("odkazy_a_informace"))
    except Exception as e:
        app.logger.error(f"Chyba p≈ôi maz√°n√≠ souboru: {str(e)}")
        flash(f"Do≈°lo k chybƒõ: {str(e)}", "danger")
        return redirect(url_for("odkazy_a_informace"))

@app.route("/stahnout_soubor/<path:filename>", methods=["GET"])
def stahnout_soubor(filename):
    """St√°hne soubor."""
    try:
        upload_folder = os.path.join(app.root_path, app.config['UPLOAD_FOLDER'])
        return send_from_directory(upload_folder, filename, as_attachment=True)
    except Exception as e:
        app.logger.error(f"Chyba p≈ôi stahov√°n√≠ souboru: {str(e)}")
        flash(f"Do≈°lo k chybƒõ: {str(e)}", "danger")
        return redirect(url_for("odkazy_a_informace"))
    
@app.route("/zebricky_a_statistiky")
def zebricky_a_statistiky():
    try:
        # Z√≠sk√°n√≠ v≈°ech discipl√≠n
        disciplines = get_all_disciplines()
        
        # Z√≠sk√°n√≠ ≈°koln√≠ch rok≈Ø pro v√Ωbƒõr
        skolni_roky = [f"{r.rok_od}/{r.rok_do}" for r in get_all_skolni_roky()]
        
        # Vybran√Ω ≈°koln√≠ rok
        vybrany_skolni_rok = f"{session['vybrany_skolni_rok_od']}/{session['vybrany_skolni_rok_do']}" if 'vybrany_skolni_rok_od' in session else None
        
        # Z√≠sk√°me vybran√Ω roƒçn√≠k z parametru URL nebo pou≈æijeme "all" jako v√Ωchoz√≠
        rocnik = request.args.get('rocnik', 'all')
        vybrany_rocnik = rocnik or "all"
        
        # Zde by mƒõl b√Ωt k√≥d pro z√≠sk√°n√≠ v√Ωkon≈Ø podle filtr≈Ø
        # Pro zaƒç√°tek m≈Ø≈æeme pou≈æ√≠t pr√°zdn√© seznamy
        discipline_performances = []
        
        return render_template(
            'zebricky_a_statistiky.html',
            disciplines=disciplines,
            skolni_roky=skolni_roky,
            vybrany_skolni_rok=vybrany_skolni_rok,
            vybrany_rocnik=vybrany_rocnik,
            discipline_performances=discipline_performances
        )
    except Exception as e:
        app.logger.error(f"Chyba p≈ôi zobrazen√≠ ≈æeb≈ô√≠ƒçk≈Ø: {e}")
        return render_template("error.html", error=f"Chyba p≈ôi zobrazen√≠ ≈æeb≈ô√≠ƒçk≈Ø: {e}")

if __name__ == "__main__":
    print("üåê Aplikace bƒõ≈æ√≠ na adrese: http://127.0.0.1:5000/")
    app.run(debug=True, host='0.0.0.0', port=5000)